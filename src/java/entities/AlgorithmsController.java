package entities;

import beans.IndexPageControllerBean;
import beans.LoginBean;
import entities.util.FileUploadUtil;
import entities.util.JsfUtil;
import entities.util.PaginationHelper;

import java.io.Serializable;
import java.util.ResourceBundle;
import jakarta.annotation.Resource;
import jakarta.inject.Named;
import jakarta.enterprise.context.SessionScoped;
import jakarta.faces.component.UIComponent;
import jakarta.faces.context.FacesContext;
import jakarta.faces.convert.Converter;
import jakarta.faces.convert.FacesConverter;
import jakarta.faces.model.DataModel;
import jakarta.faces.model.ListDataModel;
import jakarta.faces.model.SelectItem;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.PersistenceUnit;
import jakarta.servlet.http.Part;
import jakarta.transaction.UserTransaction;
import java.util.Arrays;
import java.util.List;

/**
 * Regular entity controller class generated by Netbeans.
 * Some of the methods or in this class were added or modified to account for extra functionalities.
 * List of methods modified:
 * - create()
 * - update()
 * List of added methods:
 * - setSelected()
 * - resetSelected()
 * - prepareViewFromSidebar()
 * 
 * @author shade
 */
@Named("algorithmsController")
@SessionScoped
public class AlgorithmsController implements Serializable {

    @Resource
    private UserTransaction utx = null;
    @PersistenceUnit(unitName = "Coursework2PU")
    private EntityManagerFactory emf = null;

    private Algorithms current;
    private transient DataModel items = null;
    private AlgorithmsJpaController jpaController = null;
    private PaginationHelper pagination;
    private int selectedItemIndex;
    
    @Inject
    private IndexPageControllerBean indexPageController; // Controlls the page being displayed on the main content panel of the index page.
    
    private Part file; // File containing algorithm animation.
    
    @Inject
    private LoginBean admin; // Variable used to retrieve information about the admin currently logged in.
    
    // A list of all possible time complexities:
    // used when creating a new Algorithm (a list of complexities to choose from).
    private static final List<String> TIME_COMPLEXITIES = Arrays.asList("O(1)", 
                                              "O(log n)", "O(n)", "O(n log n)", 
                                              "O(n²)", "O(n³)", "O(2^n)", "O(n!)");

    public AlgorithmsController() {
    }

    public Algorithms getSelected() {
        if (current == null) {
            current = new Algorithms();
            selectedItemIndex = -1;
        }
        return current;
    }
    
    /**
     * Setter to the current field (this field is shown as "selected" in the .xhtml pages)
     * @param current Newly selected algorithm.
     */
    public void setSelected(Algorithms current) {
        recreateModel();
        this.current = current;
    }
    
    /**
     * Reset selected to remove stale selected algorithms between page navigation.
     */
    public void resetSelected() {
        if(current != null) {
            current = null;
            selectedItemIndex = -1;
        }
    }
    
    private AlgorithmsJpaController getJpaController() {
        if (jpaController == null) {
            jpaController = new AlgorithmsJpaController(utx, emf);
        }
        return jpaController;
    }

    public PaginationHelper getPagination() {
        if (pagination == null) {
            pagination = new PaginationHelper(10) {

                @Override
                public int getItemsCount() {
                    return getJpaController().getAlgorithmsCount();
                }

                @Override
                public DataModel createPageDataModel() {
                    return new ListDataModel(getJpaController().findAlgorithmsEntities(getPageSize(), getPageFirstItem()));
                }
            };
        }
        return pagination;
    }

    public String prepareList() {
        recreateModel();
        return "List";
    }

    public String prepareView() {
        current = (Algorithms) getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        return "View";
    }
    
    /**
     * Retrieve the id of the algorithm from the current context (URL).
     * When selecting a different algorithm from the sidebar in the index page,
     * the "current" algorithm is swapped to the newly selected one.
     */
    public void prepareViewFromSidebar() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        String idParam = facesContext.getExternalContext().getRequestParameterMap().get("id");
        if (idParam != null) {
            int id = Integer.parseInt(idParam);
            current = getJpaController().findAlgorithms(id);
            indexPageController.loadAlgorithmsView();
            
        }
    }
    
    public String prepareCreate() {
        current = new Algorithms();
        selectedItemIndex = -1;
        return "Create";
    }

    /**
     * Processes and passes the required information to the Jpa controller's create method to create a new algorithm.
     * Modified this method to:
     * Validate file upload before accepting a new entry.
     * Create a new file name from the input algorithm name.
     * Retrieve the location where the file is to be stored.
     * @return a redirect to the "Create" page.
     */
    public String create() {
        try {
            // Try uploading file first
            FileUploadUtil.validateFile(file);
            
            String fileName = FileUploadUtil.getSanitisedName(current.getName());
            
            String resourcePath = FileUploadUtil.getResourcePath(fileName);
            
            getJpaController().create(current, resourcePath, fileName, file, admin);
            
            
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/Bundle").getString("AlgorithmsCreated"));
            
            // Added these so the sidebar could update after a creation.
            recreatePagination();
            recreateModel();
            
            return prepareCreate();
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, ResourceBundle.getBundle("/Bundle").getString("PersistenceErrorOccured"));
            return null;
        }
    }

    public String prepareEdit() {
        current = (Algorithms) getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        return "Edit";
    }

    /**
     * Passes the required information to the Jpa controller's edit method to update the selected algorithm.
     * Modified update to:
     * Check for file updates.
     * @return a redirect to the "view" page.
     */
    public String update() {
        try {
            getJpaController().edit(current, file);
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/Bundle").getString("AlgorithmsUpdated"));
            
            // Added these so the sidebar could update after an update.
            recreatePagination();
            recreateModel();
            
            return "View";
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, ResourceBundle.getBundle("/Bundle").getString("PersistenceErrorOccured"));
            return null;
        }
    }

    public String destroy() {
        current = (Algorithms) getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        performDestroy();
        recreatePagination();
        recreateModel();
        return "Delete";
    }

    public String destroyAndView() {
        performDestroy();
        recreateModel();
        updateCurrentItem();
        if (selectedItemIndex >= 0) {
            return "View";
        } else {
            // all items were removed - go back to list
            recreateModel();
            return "List";
        }
    }

    public void performDestroy() {
        try {
            getJpaController().destroy(current.getAlgId());
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/Bundle").getString("AlgorithmsDeleted"));
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, ResourceBundle.getBundle("/Bundle").getString("PersistenceErrorOccured"));
        }
    }

    private void updateCurrentItem() {
        int count = getJpaController().getAlgorithmsCount();
        if (selectedItemIndex >= count) {
            // selected index cannot be bigger than number of items:
            selectedItemIndex = count - 1;
            // go to previous page if last page disappeared:
            if (pagination.getPageFirstItem() >= count) {
                pagination.previousPage();
            }
        }
        if (selectedItemIndex >= 0) {
            current = getJpaController().findAlgorithmsEntities(1, selectedItemIndex).get(0);
        }
    }
      
    public List<String> getTimeComplexities() {
        return TIME_COMPLEXITIES;
    }
    
    public Part getFile() {
        return file;
    }
    
    public void setFile(Part file) {
        this.file = file;
    }

    public DataModel getItems() {
        if (items == null) {
            items = getPagination().createPageDataModel();
        }
        return items;
    }

    private void recreateModel() {
        items = null;
    }

    private void recreatePagination() {
        pagination = null;
    }

    public String next() {
        getPagination().nextPage();
        recreateModel();
        return "List";
    }

    public String previous() {
        getPagination().previousPage();
        recreateModel();
        return "List";
    }

    public SelectItem[] getItemsAvailableSelectMany() {
        return JsfUtil.getSelectItems(getJpaController().findAlgorithmsEntities(), false);
    }

    public SelectItem[] getItemsAvailableSelectOne() {
        return JsfUtil.getSelectItems(getJpaController().findAlgorithmsEntities(), true);
    }

    @FacesConverter(forClass = Algorithms.class)
    public static class AlgorithmsControllerConverter implements Converter {

        @Override
        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            AlgorithmsController controller = (AlgorithmsController) facesContext.getApplication().getELResolver().
                    getValue(facesContext.getELContext(), null, "algorithmsController");
            return controller.getJpaController().findAlgorithms(getKey(value));
        }

        java.lang.Integer getKey(String value) {
            java.lang.Integer key;
            key = Integer.valueOf(value);
            return key;
        }

        String getStringKey(java.lang.Integer value) {
            StringBuilder sb = new StringBuilder();
            sb.append(value);
            return sb.toString();
        }

        @Override
        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return null;
            }
            if (object instanceof Algorithms) {
                Algorithms o = (Algorithms) object;
                return getStringKey(o.getAlgId());
            } else {
                throw new IllegalArgumentException("object " + object + " is of type " + object.getClass().getName() + "; expected type: " + Algorithms.class.getName());
            }
        }

    }

}
